Maybe we should get a version working, then restructure?

>>>> BIG QUESTION:
>>>>>> How does SimpleTable/SimpleColumn interact with DisplayFormatter? What I've outlined below works if visible
>>>>>> is a formatter, but should it be? Are formatters per-field, or are they special generic objects? If 
>>>>>> the latter, much of this bootstrapping needs to become per-field.
>>>>>>
>>>>>> What's key, I think, is whether the save() mechinations are part of SimpleTable or part of DisplayBase.

need: template tag that wraps model object within formatter object. template tag needs to create new variable, use "as" syntax. if None is passed in, return a blank one with no settings, to make this code trivial.

> http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#setting-a-variable-in-the-context

formatter object should be produced by DisplayBase, include information serialized out of DisplayFormats.

Overrides __getattr__ to see if an appropriate formatter is attached. if so, produce formatted value. if not, pass through original value. "Formatted value" should be a proxy object that serializes (as __str__/__unicode__ to the cleaned version but that also includes some important settings; for example, .visible)
> http://stackoverflow.com/questions/1466676/create-a-wrapper-class-to-call-a-pre-and-post-function-around-existing-functions/1467296#1467296

Key: Figuring out how to cleanly and neatly serialize those settings into Formatter from DisplayBase without a ton of very-specific code.