h1. django-improv

_An experimental Django project to deploy data from CSV files onto the internet. By news app developers, for news app developers. Because doing our jobs well should be fun._


h2. Here's the pitch

Improv aims at the gray area between what a programmer can do and what a web producer can do. You shouldn't need to learn to program to put a csv online. On the other hand, if the only beautiful ways to show off your data are impossible to repurpose, even a newsroom that has a programmer will be limited in ambition.

Enter django-improv, a framework for data. Uploading data and displaying data is point and click. Visualizations are flexible, written in code.


h3. Under the hood

Django models are usually written into models.py files by programmers. But because Django's just Python, it's actually possible to generate models dynamically in memory, based on information stored in a database. Once a Model object exists in memory, "South":http://south.aeracode.org/, the popular migrations library, can create a database table to match[1]. Improv's core ModelFactory library does just that, giving you the power of a real database and Django's pretty API without the mess of writing a models file for every table that needs to go up.

Improv's second half is called DisplayFactory: A library that nests neatly alongside ModelFactory, making it easy to dream up new reusable visualizations. DisplayFactories are encapsulated in a slim reusable Django apps, and the main DisplayFactory library handles the messy bits for you, like formatting dollar figures differently from percents. You can start with an open-source DisplayFactory -- several are bundled with improv -- then move up to building your own, to show your newsroom's data the way your newsroom likes it.


h2. What's up next

* We want to add more DisplayFactories, including some that let producers design pages within the admin site in Django's powerful template language. This makes it really easy to lay out a fancy page. (It's also a clever trick to nudge web producers to dip their toes into Django templates.)
* Since this is a database-backed solution (not a purely JSON gig), we should be able to handle really big datasets. But that's not a key feature for version 1; most data that newspapers want to publish is pretty small (a few thousand rows), so let's start there.
* Ultimately, because we're relying on South's API, it should be possible to make changes to the database schema (adding/dropping columns) point and click. But that's tricky and leads us down some messy roads, so for now, we're not going to focus on changing data over time. (More quickly, we'll add code to replace a database in place, which should be enough for most quick-hit web projects.)


fn1. In this case, South is basically just a thin wrapper around syncdb. But it's a much prettier API, and the software provides other functionality we'll use down the road.